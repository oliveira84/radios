{"version":3,"sources":["Components/Grid/Grid.styles.ts","Components/Grid/Grid.tsx","data.ts","Components/Thumb/ThumbStyles.ts","Components/Thumb/Thumb.tsx","Components/Header/HeaderStyles.ts","Components/Header/Header.tsx","Components/radio-browser-api/constants.ts","Components/radio-browser-api/radioBrowser.ts","Components/RadioStyles.ts","Components/Radios.tsx","AppStyles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Content","props","minWidth","Grid","children","noRadio","id","name","url","favicon","homepage","votes","Image","img","playing","Thumb","radio","setRadio","setState","src","onError","e","target","onerror","alt","onClick","loading","replace","Search","Container","Header","status","setStatus","setSearchTerm","searchTerm","useState","input","setInput","inputRef","useRef","initial","useEffect","current","timer","setTimeout","clearTimeout","focus","className","href","rel","onChange","currentTarget","value","ref","type","placeholder","StationSearchType","byUuid","byName","byNameExact","byCodec","byCodexExact","byCountry","byCountryExact","byCountryCodeExact","byState","byStateExact","byLanguage","byLanguageExact","byTag","byTagExact","RadioBrowserApi","appName","hideBroken","baseUrl","fetchConfig","method","redirect","Error","this","headers","a","config","fetch","response","ok","json","result","search","query","runRequest","buildRequest","toUpperCase","country","language","tag","toLowerCase","searchType","removeDuplicates","stations","normalizeStations","duplicates","nameAndUrl","trim","station","changeId","changeuuid","stationuuid","urlResolved","url_resolved","countryCode","countrycode","state","codec","bitrate","clickCount","clickcount","clickTrend","clicktrend","hls","Boolean","lastCheckOk","lastcheckok","lastChangeTime","Date","lastchangetime","lastCheckOkTime","lastcheckoktime","clickTimestamp","clicktimestamp","lastLocalCheckTime","lastlocalchecktime","split","lastCheckTime","lastchecktime","tags","Set","filter","length","push","undefined","limit","resolveGetStations","ids","stationsIds","join","endPoint","limitStations","queryCopy","addHideBrokenParam","encodeURIComponent","Array","isArray","tagList","queryParams","createQueryParams","finalConfig","params","Object","entries","key","slice","Radios","setStations","api","searchStations","data","sort","r1","r2","onBuffer","onBufferEnd","width","height","elem","includes","map","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb25a1e2.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n \r\n`;\r\n\r\nexport const Content = styled.div<{ minWidth: string }>`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(${props => props.minWidth}, 1fr));\r\n  grid-gap: 0.75rem;\r\n  align-items: center;\r\n  justify-items: center;\r\n\r\n`;\r\n","import React from \"react\";\r\nimport {Content, Wrapper} from \"./Grid.styles\"\r\n\r\ninterface Props {\r\n\tchildren: JSX.Element[],\r\n\tminWidth: string,\r\n}\r\n\r\nconst Grid = ({children, minWidth}: Props) => {\r\n\treturn (\r\n\t\t<Wrapper>\r\n\t\t\t<Content minWidth={minWidth}>{children}</Content>\r\n\t\t</Wrapper>\r\n\t)\r\n}\r\n\r\n\r\nexport default Grid;","export interface Radio {\r\n\tid: string,\r\n\tname: string,\r\n\tfavicon: string,\r\n\turl: string,\r\n\tvotes: number,\r\n\thomepage: string,\r\n}\r\n\r\nexport interface RadioState {\r\n\tplaying: boolean,\r\n\tloading: boolean,\r\n}\r\n\r\nexport const noRadio: Radio = {id: \"noRadio\", name: \"\", url: \"\", favicon: \"\", homepage: \"\", votes: 0};\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div<{ playing: boolean }>`\r\n  height: 160px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  text-align: center;\r\n\r\n  h3 {\r\n    color: #333;\r\n    margin-top: 10px;\r\n    font-weight: 900;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img<{ playing: boolean }>`\r\n  width: 110px;\r\n  height: 110px;\r\n  transition: all 0.2s;\r\n  object-fit: cover;\r\n  border-radius: 10px;\r\n  -webkit-box-shadow: 0 2px 5px 0 #000000;\r\n  box-shadow: 0 3px 5px 0 #000000;\r\n  opacity: ${props => props.playing ? 1 : 0.8};\r\n  animation: animate infinite;\r\n\r\n  @keyframes animate {\r\n    0% {\r\n      border: 4px solid;\r\n    }\r\n    100% {\r\n      border: 4px solid;\r\n    }\r\n  }\r\n\r\n  :hover {\r\n    opacity: 1;\r\n    transform: scale(0.97);\r\n  }\r\n\r\n\r\n`;","import React from \"react\";\r\nimport {Image, Wrapper} from \"./ThumbStyles\";\r\nimport {Radio, RadioState} from \"../../data\";\r\n\r\n\r\ninterface Props {\r\n\tradio: Radio,\r\n\r\n\tsetRadio(radio: Radio): void,\r\n\r\n\tsetState(state: RadioState): void,\r\n\r\n\tplaying: boolean,\r\n\r\n}\r\n\r\n\r\nconst Thumb = ({radio, setRadio, setState, playing}: Props) => {\r\n\r\n\treturn (\r\n\t\t<Wrapper playing={playing}>\r\n\t\t\t<Image src={radio.favicon}\r\n\t\t\t       onError={(e) => {\r\n\t\t\t\t       //@ts-ignore\r\n\t\t\t\t       e.target.onerror = null;\r\n\t\t\t\t       //@ts-ignore\r\n\t\t\t\t       e.target.src = \"images/no_image.jpg\"\r\n\t\t\t       }}\r\n\t\t\t       alt={radio.name} playing={playing} onClick={() => {\r\n\t\t\t\tsetRadio(radio)\r\n\t\t\t\tsetState({playing: true, loading: true});\r\n\t\t\t}}/>\r\n\t\t\t<h3>{radio.name.replace(/_|[Rr][aá]dio|\\(.*\\)/, \"\")}</h3>\r\n\t\t</Wrapper>\r\n\t)\r\n};\r\n\r\nexport default Thumb;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  padding-top: 20px;\r\n  width: 100vw;\r\n  height: 140px;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  font-size: 1.5rem;\r\n  z-index: 10;\r\n  background-size: cover;\r\n  color: white;\r\n  background: linear-gradient(90deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0)),\r\n  url(\"https://images.unsplash.com/photo-1579527455755-d16e330c0576?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1951&q=80\") center left;\r\n  -webkit-box-shadow: 0 2px 10px 0 #000000;\r\n  box-shadow: 0 2px 10px 1px #000000;\r\n  border-radius: 0 0 20px 20px;\r\n\r\n`;\r\n\r\nexport const Search = styled.div`\r\n  position: absolute;\r\n  top: 75px;\r\n  left: 10%;\r\n  width: 80vw;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  i {\r\n    margin-left: 15px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  input {\r\n    height: 2rem;\r\n    width: 30%;\r\n    min-width: 200px;\r\n    padding-left: 10px;\r\n\r\n    :focus {\r\n      outline: none;\r\n    }\r\n\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  margin: 0 auto;\r\n  width: 80vw;\r\n  height: 80px;\r\n  background: transparent;\r\n\r\n  .icon {\r\n    display: inline-block;\r\n    width: 50px;\r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: white;\r\n    display: inline-block;\r\n    font-weight: 700;\r\n    min-width: 400px;\r\n\r\n  }\r\n\r\n`;\r\n\r\n","import {Container, Search, Wrapper} from \"./HeaderStyles\";\r\nimport {Radio, RadioState} from \"../../data\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\n\r\n\r\ninterface Props {\r\n\tradio: Radio,\r\n\tstatus: RadioState,\r\n\r\n\tsetStatus(state: RadioState): void,\r\n\r\n\tsetSearchTerm(input: string): void,\r\n\r\n\tsearchTerm: string,\r\n}\r\n\r\nexport const Header = ({radio, status, setStatus, setSearchTerm, searchTerm}: Props) => {\r\n\tconst [input, setInput] = useState<string>(searchTerm)\r\n\tconst inputRef = useRef<HTMLInputElement>(null);\r\n\tconst initial = useRef<boolean>(true);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (initial.current) {\r\n\t\t\tinitial.current = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst timer = setTimeout(() => {\r\n\t\t\tsetSearchTerm(input);\r\n\t\t}, 500)\r\n\t\treturn () => clearTimeout(timer);\r\n\t}, [setSearchTerm, input])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (inputRef.current !== null)\r\n\t\t\tinputRef.current.focus();\r\n\t}, [])\r\n\r\n\r\n\treturn (\r\n\t\t<Wrapper>\r\n\r\n\t\t\t<Container>\r\n\t\t\t\t{radio.id !== \"noRadio\" ?\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<span className={\"icon\"}>\t{status.loading ?\r\n\t\t\t\t\t\t\t<i className={\"fas fa-cog fa-spin\"} onClick={() => setStatus({...status, playing: false})}/> :\r\n\t\t\t\t\t\t\tstatus.playing ?\r\n\t\t\t\t\t\t\t\t<i className={\"fas fa-pause\"} onClick={() => setStatus({...status, playing: false})}/> :\r\n\t\t\t\t\t\t\t\t<i className={\"fas fa-play\"} onClick={() => setStatus({...status, playing: true})}/>}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<a href={radio.homepage} target=\"_blank\" rel=\"noreferrer\">{radio.name.replace(/\\(.*\\)|[Rr][aá]dio/, \"\")}</a>\r\n\t\t\t\t\t</>\r\n\t\t\t\t\t:\r\n\t\t\t\t\t<h3>Portuguese Radios</h3>\r\n\t\t\t\t}\r\n\t\t\t</Container>\r\n\r\n\t\t\t<Search>\r\n\r\n\t\t\t\t<input onChange={e => setInput(e.currentTarget.value)}\r\n\t\t\t\t       ref={inputRef} // @ts-ignore\r\n\t\t\t\t       value={input}\r\n\t\t\t\t       type=\"text\"\r\n\t\t\t\t       placeholder={\"Search for a Radio\"}/>\r\n\r\n\t\t\t\t{input &&\r\n        <i className={\"fas fa-times\"} onClick={() => {\r\n\t\t\t\t\tsetSearchTerm(\"\");\r\n\t\t\t\t\tsetInput(\"\");\r\n\t\t\t\t}}/>}\r\n\t\t\t</Search>\r\n\t\t</Wrapper>\r\n\t)\r\n}","/**\n * @public\n */\n\nexport const StationSearchOrder = {\n\tname: 'name',\n\turl: 'url',\n\thomepage: 'homepage',\n\tfavicon: 'favicon',\n\ttags: 'tags',\n\tcountry: 'country',\n\tstate: 'state',\n\tlanguage: 'language',\n\tvotes: 'votes',\n\tcodec: 'codec',\n\tbitrate: 'bitrate',\n\tlastCheckOK: 'lastCheckOK',\n\tlastCheckTime: 'lastCheckTime',\n\tclickTimeStamp: 'clickTimeStamp',\n\tclickCount: 'clickCount',\n\tclickTrend: 'clickTrend',\n\trandom: 'random'\n} as const\n\n/**\n * @public\n */\nexport const StationSearchType = {\n\tbyUuid: 'byUuid',\n\tbyName: 'byName',\n\tbyNameExact: 'byNameExact',\n\tbyCodec: 'byCodec',\n\tbyCodexExact: 'byCodecExact',\n\tbyCountry: 'byCountry',\n\tbyCountryExact: 'byCountryExact',\n\tbyCountryCodeExact: 'byCountryCodeExact',\n\tbyState: 'byState',\n\tbyStateExact: 'byStateExact',\n\tbyLanguage: 'byLanguage',\n\tbyLanguageExact: 'byLanguageexact',\n\tbyTag: 'byTag',\n\tbyTagExact: 'byTagExact'\n} as const\n\n/**\n * @public\n */\nexport type StationResponse = {\n\tchangeuuid: string\n\tstationuuid: string\n\tname: string\n\turl: string\n\t// eslint-disable-next-line\n\turl_resolved: string\n\thomepage: string\n\tfavicon: string\n\ttags: string\n\tcountry: string\n\tcountrycode: string\n\tstate: string\n\tlanguage: string\n\tvotes: number\n\tlastchangetime: string\n\tcodec: string\n\tbitrate: number\n\thls: number\n\tlastcheckok: number\n\tlastchecktime: string\n\tlastlocalchecktime: string\n\tlastcheckoktime: string\n\tclicktimestamp: string\n\tclickcount: number\n\tclicktrend: number\n}\n\n/**\n * @public\n */\nexport type Station = {\n\tchangeId: string\n\tid: string\n\tname: string\n\turl: string\n\turlResolved: string\n\thomepage: string\n\tfavicon: string\n\ttags: string[]\n\tcountry: string\n\tcountryCode: string\n\tstate: string\n\tlanguage: string[]\n\tvotes: number\n\tlastChangeTime: Date\n\tcodec: string\n\tbitrate: number\n\thls: boolean\n\tlastCheckOk: boolean\n\tlastCheckTime: Date\n\tlastCheckOkTime: Date\n\tlastLocalCheckTime: Date\n\tclickTimestamp: Date\n\tclickCount: number\n\tclickTrend: number\n}\n\n/**\n * @public\n */\nexport type StationQuery = {\n\toffset?: number\n\tlimit?: number\n\treverse?: boolean\n\torder?: keyof typeof StationSearchOrder\n\thideBroken?: boolean\n\tremoveDuplicates?: boolean\n}\n\n/**\n * @public\n */\nexport type AdvancedStationQuery = {\n\tname?: string\n\tnameExact?: boolean\n\tcountry?: string\n\tcountryExact?: boolean\n\tcountryCode?: string\n\tstate?: string\n\tstateExact?: boolean\n\tlanguage?: string\n\tlanguageExact?: boolean\n\ttag?: string\n\ttagExact?: boolean\n\ttagList?: string[]\n\tcodec?: string\n\tbitrateMin?: string\n\tbitrateMax?: string\n} & StationQuery\n\n/**\n * @public\n */\nexport type Query = {\n\torder?: 'name' | 'stationcount'\n\treverse?: boolean\n\thideBroken?: boolean\n} & Object\n\n// valid for country codes also\n/**\n * @public\n */\nexport type CountryResult = {\n\tname: string\n\tstationcount: number\n}\n\n/**\n * @public\n */\nexport type TagResult = CountryResult\n/**\n * @public\n */\nexport type CountryStateResult = CountryResult & {\n\tcountry: string\n}\n","import {\n  StationSearchType,\n  AdvancedStationQuery,\n  CountryResult,\n  CountryStateResult,\n  Query,\n  Station,\n  StationQuery,\n  StationResponse,\n  TagResult\n} from './constants'\n\n/**\n * Query the radio browser api.\n * @public\n */\nexport class RadioBrowserApi {\n  //static version = __VERSION__\n\n  protected baseUrl: string | undefined\n\n  protected fetchConfig: RequestInit = {\n    method: 'GET',\n    redirect: 'follow'\n  }\n\n  /**\n   * Creates an instance of radio browser api.\n   * @param appName - App name to be used as user agent header to indentify the calls to the API\n   * @param hideBroken - Hide broken stations for all future API calls\n   */\n  constructor(protected appName: string, protected hideBroken = true) {\n    if (!appName) {\n      throw new Error('appName is required')\n    }\n    this.fetchConfig.headers = { 'user-agent': this.appName }\n  }\n\n  /**\n   * Resolves API base url this will be the default for all class instances.\n   * @param autoSet - Automatically set first resolved base url\n   * @param config-  Fetch configuration\n   * @returns Array of objects with the ip and name of the api server\n   */\n  async resolveBaseUrl(\n    config: RequestInit = {}\n  ): Promise<{ ip: string; name: string }[]> {\n    let result: { ip: string; name: string }[]\n\n    const response = await fetch(\n      'http://all.api.radio-browser.info/json/servers',\n      config\n    )\n    if (response.ok) {\n      result = await response.json()\n\n      return result\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Sets base url for all api calls\n   * @param url - Url to the api server\n   */\n  setBaseUrl(url: string): void {\n    this.baseUrl = url\n  }\n\n  /**\n   * Get current  base url\n   * @returns Base url\n   */\n  getBaseUrl(): string | undefined {\n    return this.baseUrl\n  }\n\n  /**\n   * Gets available countries\n   * @param search - Search for country\n   * @param query - Query params\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountries(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('countries', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets countries by country code\n   * @param search - Country code\n   * @param query  - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country results with the name of the station and station count\n   */\n  async getCountryCodes(\n    search?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    search = search ? `${search.toUpperCase()}` : ''\n\n    return this.runRequest(\n      this.buildRequest('countrycodes', search, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets available codes\n   * @param query - Query\n   * @param fetchConfig -  Fetch configuration\n   * @returns List of available codes\n   */\n  async getCodecs(\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(this.buildRequest('codecs', '', query), fetchConfig)\n  }\n\n  /**\n   * Gets country states. States **should** be regions inside a country.\n   * @param country - Limit state to particular country\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of country states\n   */\n  async getCountryStates(\n    country?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryStateResult[]> {\n    return this.runRequest(\n      this.buildRequest('states', country, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available languages\n   * @param language- Limit results to particular language\n   * @param query -  Query\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of language results\n   */\n  async getLanguages(\n    language?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<CountryResult[]> {\n    return this.runRequest(\n      this.buildRequest('languages', language, query),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Gets all available tags\n   * @param tag - Limit results to particular tag\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @returns List of tag results\n   */\n  async getTags(\n    tag?: string,\n    query?: Query,\n    fetchConfig?: RequestInit\n  ): Promise<TagResult[]> {\n    tag = tag ? tag.toLowerCase() : '' // empty string returns all tags\n\n    return this.runRequest(this.buildRequest('tags', tag, query), fetchConfig)\n  }\n\n  /**\n   * Gets stations by various available parameters\n   * @param searchType - Parameter for the search\n   * @param search - Search value for the parameter\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async getStationsBy(\n    searchType: keyof typeof StationSearchType,\n    search?: string,\n    query?: StationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    if (!StationSearchType[searchType]) {\n      throw new Error(`search type does not exist: ${searchType}`)\n    }\n\n    search = search ? search.toLowerCase() : ''\n\n    // http://fr1.api.radio-browser.info/{format}/stations/byuuid/{searchterm}\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/${searchType.toLowerCase()}`, search, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Normalizes stations from the API response\n   * @param stations - Array of station responses\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of normalized stations\n   */\n  protected normalizeStations(\n    stations: StationResponse[],\n    removeDuplicates = false\n  ): Station[] {\n    const result = []\n    const duplicates: { [key: string]: boolean } = {}\n\n    for (const response of stations) {\n      if (removeDuplicates) {\n        const nameAndUrl = `${response.name.toLowerCase().trim()}${response.url\n          .toLowerCase()\n          .trim()}`\n\n        // guard against results having the same stations under different id's\n        if (duplicates[nameAndUrl]) continue\n\n        duplicates[nameAndUrl] = true\n      }\n\n      const station: Station = {\n        changeId: response.changeuuid,\n        id: response.stationuuid,\n        name: response.name,\n        url: response.url,\n        urlResolved: response.url_resolved,\n        homepage: response.homepage,\n        favicon: response.favicon,\n        country: response.country,\n        countryCode: response.countrycode,\n        state: response.state,\n        votes: response.votes,\n        codec: response.codec,\n        bitrate: response.bitrate,\n        clickCount: response.clickcount,\n        clickTrend: response.clicktrend,\n        hls: Boolean(response.hls),\n        lastCheckOk: Boolean(response.lastcheckok),\n        lastChangeTime: new Date(response.lastchangetime),\n        lastCheckOkTime: new Date(response.lastcheckoktime),\n        clickTimestamp: new Date(response.clicktimestamp),\n        lastLocalCheckTime: new Date(response.lastlocalchecktime),\n        language: response.language.split(','),\n        lastCheckTime: new Date(response.lastchecktime),\n        //@ts-ignore\n        tags: [...new Set(response.tags.split(','))].filter(\n          (tag) => tag.length > 0 && tag.length < 10\n        ) // drop duplicates and tags over 10 characters\n      }\n\n      result.push(station)\n    }\n\n    return result\n  }\n\n  /**\n   * Gets all available stations. Please note that if results\n   * are not limited somehow, they can be huge (size in MB)\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of all available stations\n   */\n  async getAllStations(\n    query?: Omit<StationQuery, 'hideBroken'>,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations', '', query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Searches stations by particular params\n   * @param query - Query\n   * @param fetchConfig - Fetch configuration\n   * @param removeDuplicates - remove duplicate stations\n   * @returns Array of station results\n   */\n  async searchStations(\n    query: AdvancedStationQuery,\n    fetchConfig?: RequestInit,\n    removeDuplicates = false\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest('stations/search', undefined, query),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations, removeDuplicates)\n  }\n\n  /**\n   * Gets stations by clicks. Stations with the highest number of clicks are most popular\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topclick', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by votes. Returns most voted stations\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByVotes(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('topvote', limit, fetchConfig)\n  }\n\n  /**\n   * Gets stations by recent clicks. They are basically most recently listened stations.\n   * @param limit - Limit the number of returned stations\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsByRecentClicks(\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    return this.resolveGetStations('lastclick', limit, fetchConfig)\n  }\n\n  /**\n   * Sends click for the station. This method should be used when user starts to listen to the station.\n   * @param id - Station id\n   * @param fetchConfig  - Fetch configuration\n   * @returns Station click object\n   */\n  async sendStationClick(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(\n      this.buildRequest('url', id, undefined, false),\n      fetchConfig\n    )\n  }\n\n  /**\n   * Votes for station. This method should be used when user adds the station to favourites etc..\n   * @param id - Station id\n   * @param fetchConfig - Fetch configuration\n   * @returns Station vote object\n   */\n  async voteForStation(\n    id: string,\n    fetchConfig?: RequestInit\n  ): Promise<{\n    ok: boolean\n    message: string\n    stationuuid: string\n    name: string\n    url: string\n  }> {\n    return this.runRequest(this.buildRequest('vote', id), fetchConfig)\n  }\n\n  /**\n   * Gets stations by station id\n   * @param ids - Array of station id's\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationsById(\n    ids: string[],\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stationsIds = ids.join(',')\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/byuuid?uuids=${stationsIds}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Gets station by station url\n   * @param url - Station url\n   * @param fetchConfig - Fetch configuration\n   * @returns Array of stations\n   */\n  async getStationByUrl(\n    url: string,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(`stations/byurl/${url}`, undefined, undefined, false),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  protected async resolveGetStations(\n    endPoint: string,\n    limit?: number,\n    fetchConfig?: RequestInit\n  ): Promise<Station[]> {\n    const limitStations = limit ? `/${limit}` : ''\n    const stations = await this.runRequest<StationResponse[]>(\n      this.buildRequest(\n        `stations/${endPoint}${limitStations}`,\n        undefined,\n        undefined,\n        false\n      ),\n      fetchConfig\n    )\n\n    return this.normalizeStations(stations)\n  }\n\n  /**\n   * Builds request to the API\n   * @param endPoint - API endpoint\n   * @param search - Search term\n   * @param query - Query\n   * @param addHideBrokenParam - Hide broken stations from the results\n   * @returns Built request string\n   */\n  protected buildRequest(\n    endPoint: string,\n    search?: string,\n    query?: Query | AdvancedStationQuery | StationQuery,\n    addHideBrokenParam = true\n  ): string {\n    search = search ? `/${encodeURIComponent(search)}` : ''\n\n    let queryCopy\n    if (query) {\n      queryCopy = { ...query }\n      if ('tagList' in queryCopy && Array.isArray(queryCopy.tagList)) {\n        queryCopy.tagList = [...queryCopy.tagList]\n      }\n      if (addHideBrokenParam && typeof queryCopy.hideBroken === 'undefined') {\n        queryCopy.hideBroken = this.hideBroken\n      }\n    }\n\n    const queryParams = queryCopy ? this.createQueryParams(queryCopy) : ''\n\n    return `${endPoint}${search}${queryParams}`\n  }\n\n  /**\n   * Fires of the request to the API\n   * @param url - Request url\n   * @param fetchConfig - Fetch configuration\n   * @returns Fetch response\n   */\n  protected async runRequest<T>(\n    url: string,\n    fetchConfig: RequestInit = {}\n  ): Promise<T> {\n    const finalConfig = {\n      ...this.fetchConfig,\n      ...fetchConfig,\n      headers: {\n        ...this.fetchConfig.headers,\n        ...fetchConfig.headers\n      }\n    }\n\n    if (!this.baseUrl) {\n      //const results = await this.resolveBaseUrl()\n      //const random = Math.floor(Math.random() * results.length)\n      //this.baseUrl = `https://${results[random].name}`\n      this.baseUrl = `https://fr1.api.radio-browser.info`\n    }\n\n    const response = await fetch(`${this.baseUrl}/json/${url}`, finalConfig)\n\n    if (response.ok) {\n      return response.json()\n    } else {\n      throw response\n    }\n  }\n\n  /**\n   * Encodes query parameters\n   * @param params - Object that represents paramters as key value pairs\n   * @returns  String of encoded query parameters\n   */\n  protected createQueryParams(params?: object): string {\n    let result = ''\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        result += `&${key}=${encodeURIComponent(value)}`\n      }\n    }\n\n    return result ? `?${result.slice(1).toLowerCase()}` : ''\n  }\n}\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  position: absolute;\r\n  top: 180px;\r\n  width: 80vw;\r\n  overflow: hidden;\r\n  \r\n`;","import React, {useEffect, useState} from \"react\"\r\nimport Grid from \"./Grid/Grid\";\r\nimport ReactPlayer from \"react-player\";\r\nimport {noRadio, Radio, RadioState} from \"../data\";\r\nimport Thumb from \"./Thumb/Thumb\";\r\nimport {Header} from \"./Header/Header\";\r\n// @ts-ignore\r\nimport {RadioBrowserApi} from './radio-browser-api'\r\nimport {Wrapper} from \"./RadioStyles\";\r\n\r\n\r\nexport const Radios = () => {\r\n\tconst [radio, setRadio] = useState<Radio>(noRadio)\r\n\tconst [state, setState] = useState<RadioState>({playing: false, loading: false});\r\n\tconst [stations, setStations] = useState<Radio[]>([])\r\n\tconst [searchTerm, setSearchTerm] = useState<string>(\"\");\r\n\r\n\tuseEffect(() => {\r\n\t\tconst api = new RadioBrowserApi('My Radio App')\r\n\t\tconst setState = async () => {\r\n\t\t\tconst data = await api.searchStations({\r\n\t\t\t\tcountryCode: 'PT',\r\n\t\t\t\tlimit: 999,\r\n\t\t\t});\r\n\t\t\tsetStations(data.sort((r1: Radio, r2: Radio) => r2.votes - r1.votes));\r\n\t\t}\r\n\t\tsetState();\r\n\t}, [setStations]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header radio={radio} status={state}\r\n\t\t\t        setStatus={setState}\r\n\t\t\t        setSearchTerm={setSearchTerm}\r\n\t\t\t        searchTerm={searchTerm}/>\r\n\t\t\t<ReactPlayer\r\n\t\t\t\tonBuffer={() => setState({...state, loading: true})}\r\n\t\t\t\tonBufferEnd={() => setState({...state, loading: false})}\r\n\t\t\t\turl={radio.url}\r\n\t\t\t\tplaying={state.playing}\r\n\t\t\t\twidth={0} height={0}\r\n\t\t\t/>\r\n\t\t\t<Wrapper>\r\n\t\t\t\t<Grid minWidth={\"120px\"}>\r\n\t\t\t\t\t{searchTerm ? stations.filter(elem => (\r\n\t\t\t\t\t\t\telem.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n\t\t\t\t\t\t)).map(elem => (\r\n\t\t\t\t\t\t\t<Thumb\r\n\t\t\t\t\t\t\t\tkey={elem.id}\r\n\t\t\t\t\t\t\t\tradio={elem}\r\n\t\t\t\t\t\t\t\tsetRadio={setRadio}\r\n\t\t\t\t\t\t\t\tsetState={setState}\r\n\t\t\t\t\t\t\t\tplaying={elem.id === radio.id}\r\n\t\t\t\t\t\t\t/>)) :\r\n\t\t\t\t\t\tstations.map(elem => (\r\n\t\t\t\t\t\t\t<Thumb\r\n\t\t\t\t\t\t\t\tkey={elem.id}\r\n\t\t\t\t\t\t\t\tradio={elem}\r\n\t\t\t\t\t\t\t\tsetRadio={setRadio}\r\n\t\t\t\t\t\t\t\tsetState={setState}\r\n\t\t\t\t\t\t\t\tplaying={elem.id === radio.id}\r\n\t\t\t\t\t\t\t/>))}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Wrapper>\r\n\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Radios;","import styled, {createGlobalStyle} from \"styled-components\";\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: Roboto, sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n\r\n    // Remove scrollbar allowing scroll    \r\n    background: #f4f4f4;\r\n    scrollbar-width: none;\r\n    -ms-overflow-style: none;\r\n\r\n    &::-webkit-scrollbar {\r\n      width: 0;\r\n      background: transparent;\r\n    }\r\n\r\n    ///////////////////////////////////\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  margin: 0 auto;\r\n  width: 80vw;\r\n`;\r\n\r\n","import React from 'react';\nimport Radios from \"./Components/Radios\";\nimport {GlobalStyle, Wrapper} from \"./AppStyles\";\n\n\nfunction App() {\n\treturn (\n\t\t<Wrapper>\n\t\t\t<Radios/>\n\t\t\t<GlobalStyle/>\n\t\t</Wrapper>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App/>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n"],"sourceRoot":""}